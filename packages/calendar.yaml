google:
  client_id: !secret google_client_id
  client_secret: !secret google_client_secret

calendar:
  - platform: caldav
    url: https://caldav.icloud.com
    username: !secret icloud_user
    password: !secret icloud_password
    calendars:
      - "Mario"
      - "Sandra"


sensor:

  - platform: template
    sensors:
      next_garbage:
        entity_id: calendar.get_garbage
        value_template: >
          {% set due_date = (as_timestamp(states.calendar.get_garbage.attributes.end_time) | int) %}
          {% set todays_date = (now().strftime("%s") | int ) %}
          {% set countdown = ((due_date - todays_date | int) / 24 / 60 / 60) | round(0) %}
          {{ countdown }}
  
      next_organic:
        entity_id: calendar.get_organic
        value_template: >
          {% set due_date = (as_timestamp(states.calendar.get_organic.attributes.end_time) | int) %}
          {% set todays_date = (now().strftime("%s") | int ) %}
          {% set countdown = ((due_date - todays_date | int) / 24 / 60 / 60) | round(0) %}
          {{ countdown }}
  
      next_recycling:
        entity_id: calendar.get_recycling
        value_template: >
          {% set due_date = (as_timestamp(states.calendar.get_recycling.attributes.end_time) | int) %}
          {% set todays_date = (now().strftime("%s") | int ) %}
          {% set countdown = ((due_date - todays_date | int) / 24 / 60 / 60) | round(0) %}
          {{ countdown }}
  
      next_paper:
        entity_id: calendar.get_paper
        value_template: >
          {% set due_date = (as_timestamp(states.calendar.get_paper.attributes.end_time) | int) %}
          {% set todays_date = (now().strftime("%s") | int ) %}
          {% set countdown = ((due_date - todays_date | int) / 24 / 60 / 60) | round(0) %}
          {{ countdown }}

      next_garbage_text:
        entity_id: sensor.next_garbage
        value_template: >
          {% set days = (states('sensor.next_garbage') | int ) %}
          {% if days == 0 %}
            heute
          {% else %}
            {% if days == 1 %}
              morgen
            {% else %}
              in {{ days }} Tagen
            {% endif %}
          {% endif %}
  
      next_organic_text:
        entity_id: sensor.next_organic
        value_template: >
          {% set days = (states('sensor.next_organic') | int ) %}
          {% if days == 0 %}
            heute
          {% else %}
            {% if days == 1 %}
              morgen
            {% else %}
              in {{ days }} Tagen
            {% endif %}
          {% endif %}
  
      next_recycling_text:
        entity_id: sensor.next_recycling
        value_template: >
          {% set days = (states('sensor.next_recycling') | int ) %}
          {% if days == 0 %}
            heute
          {% else %}
            {% if days == 1 %}
              morgen
            {% else %}
              in {{ days }} Tagen
            {% endif %}
          {% endif %}
  
      next_paper_text:
        entity_id: sensor.next_paper
        value_template: >
          {% set days = (states('sensor.next_paper') | int ) %}
          {% if days == 0 %}
            heute
          {% else %}
            {% if days == 1 %}
              morgen
            {% else %}
              in {{ days }} Tagen
            {% endif %}
          {% endif %}

      next_garbage_collection:
        value_template: >
          {%- set mysensors = ["sensor.next_garbage", "sensor.next_organic", "sensor.next_recycling", "sensor.next_paper"] %}
          {%- set garbage = (states('sensor.next_garbage') | int ) %}
          {%- set organic = (states('sensor.next_organic') | int ) %}
          {%- set recycling = (states('sensor.next_recycling') | int ) %}
          {%- set paper = (states('sensor.next_paper') | int ) %}
          {%- set min_days = (garbage, organic, recycling, paper) | min %}

          {% if min_days == 0 %}
            {%- set daytext = 'heute' %}            
          {% else %}
            {% if min_days == 1 %}
            {%- set daytext = 'morgen' %}            
            {% else %}
              {%- set daytext = 'in ' + min_days|string + ' Tagen' %}                          
            {% endif %}
          {% endif %}

          {%- for entity in mysensors if is_state(entity, min_days | string )%}
            {%- if states[entity.split('.')[0]][entity.split('.')[1]].name  == 'next_garbage'  %}
              {%- set bin_name = 'Restmülltonne' %}
            {%- endif %}         
            {%- if states[entity.split('.')[0]][entity.split('.')[1]].name  == 'next_organic'  %}
              {%- set bin_name = 'Biotonne' %}
            {%- endif %}         
            {%- if states[entity.split('.')[0]][entity.split('.')[1]].name  == 'next_recycling'  %}
              {%- set bin_name = 'Gelbe Tonne' %}
            {%- endif %}         
            {%- if states[entity.split('.')[0]][entity.split('.')[1]].name  == 'next_paper'  %}
              {%- set bin_name = 'Papiertonne' %}
            {%- endif %}         
            {%- if loop.first and loop.last %}
              Die {{ bin_name }} wird {{ daytext }} Tagen abgeholt.
            {%- else %}
              {%- if loop.first %}Die {% elif loop.last %} und die {% else %}, die {% endif -%}
              {{ bin_name }}
              {%- if loop.last %} werden in {{ min_days }} Tagen abgeholt.{%- endif %}
            {%- endif %}
          {%- endfor %}

      next_garbage_days:
        value_template: >
          {{ ((states('sensor.next_garbage') | int ), (states('sensor.next_organic') | int ), (states('sensor.next_recycling') | int ), (states('sensor.next_paper') | int )) | min }}

binary_sensor:
  - platform: template
    sensors:
      garbage_warning:
        value_template: >
          {{ states('sensor.next_garbage_days')|int == 1 }}
      garbage_critical:
        value_template: >
          {{ states('sensor.next_garbage_days')|int == 0 }}

automation:
  - id: update_calendar_sensors
    alias: "Update Calendar Sensors"
    initial_state: 'on'
    trigger:
      - platform: time_pattern
        minutes: '/5'
    action:
      - service: homeassistant.update_entity
        entity_id: sensor.next_garbage
      - service: homeassistant.update_entity
        entity_id: sensor.next_organic
      - service: homeassistant.update_entity
        entity_id: sensor.next_recycling
      - service: homeassistant.update_entity
        entity_id: sensor.next_paper
      - service: homeassistant.update_entity
        entity_id: sensor.next_garbage_text
      - service: homeassistant.update_entity
        entity_id: sensor.next_organic_text
      - service: homeassistant.update_entity
        entity_id: sensor.next_recycling_text
      - service: homeassistant.update_entity
        entity_id: sensor.next_paper_text
      - service: homeassistant.update_entity
        entity_id: sensor.next_garbage_collection
      - service: homeassistant.update_entity
        entity_id: sensor.next_garbage_days
      - service: homeassistant.update_entity
        entity_id: binary_sensor.garbage_warning
      - service: homeassistant.update_entity
        entity_id: binary_sensor.garbage_critical


#           {% set months = ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"] %}
#           {% set days = ["Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag", "Sonntag"] %}
#           {% set garbage = states.sensor.next_garbage|int %}
#           {% set organic = states.sensor.next_organic|int %}
#           {% set recycling = states.sensor.next_recycling|int %}
#           {% set paper = states.sensor.next_paper|int %}
#           {% set bin_list = [] %}
#           {% set min_days = (garbage, organic, recycling, paper)|min %}
#           {% if garbage == min_days %}
#             {{ as_timestamp(states.calendar.get_garbage.attributes.end_time), '%Y-%m-%d %H:%M:%S')) | timestamp_custom('%A @ %-I:%M %p') }}
#             Oven · {{ maximum }} W
#           {% elif b == maximum  %}
#             Boiler · {{ maximum }} W
#           {% elif c == maximum  %}Fan · {{ maximum }} W
#           {% endif %} '

# Die Mülltonnen werden am {{days[ as_timestamp(states.calendar.get_recycling.attributes.end_time) | timestamp_custom('%-d') | int -1 ]}} den 
# {{ as_timestamp(states.calendar.get_recycling.attributes.end_time) | timestamp_custom('%-m.') }} {{months[ as_timestamp(states.calendar.get_recycling.attributes.end_time) | timestamp_custom('%-m') | int -1 ]}}
# {{ netx_date }}

# {{ as_timestamp(states.calendar.get_recycling.attributes.end_time) | timestamp_custom('%-d.') }}
# {{ months[as_timestamp(states.calendar.get_recycling.attributes.end_time) | timestamp_custom('%-m')|int] }}
